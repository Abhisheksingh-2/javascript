Introduction:  MongoDB, the most popular NoSQL database, 
is an open-source document-oriented database. The term 
‘NoSQL’ means ‘non-relational’. It means that MongoDB 
isn’t based on the table-like relational database 
structure but provides an altogether different mechanism 
for storage and retrieval of data. This format of 
storage is called BSON ( similar to JSON format).

MongoDB used when schemas not fixed to the database and 
huge of data store in the database.

It is non-relational based database.

Where do we use MongoDB?

MongoDB is preferred over RDBMS in the following 
scenarios:

Big Data: If you have huge amount of data to be stored 
in tables, think of MongoDB before RDBMS databases. 
MongoDB has built-in solution for partitioning and 
sharding your database.
Unstable Schema:   Adding a new column in RDBMS is hard 
whereas MongoDB is schema-less. Adding a new field does 
not effect old documents and will be very easy.
Distributed data   Since multiple copies of data are 
stored across different servers, recovery of data is 
instant and safe even if there is a hardware failure.

Features of MongoDB:

Document Oriented: MongoDB stores the main subject in 
the minimal number of documents and not by breaking it 
up into multiple relational structures like RDBMS. For 
example, it stores all the information of a computer in 
a single document called Computer and not in distinct 
relational structures like CPU, RAM, Hard disk, etc.
Indexing: Without indexing, a database would have to 
scan every document of a collection to select those that 
match the query which would be inefficient. So, for 
efficient searching Indexing is a must and MongoDB uses 
it to process huge volumes of data in very less time.
Scalability: MongoDB scales horizontally using sharding 
(partitioning data across various servers). Data is 
partitioned into data chunks using the shard key, and 
these data chunks are evenly distributed across shards 
that reside across many physical servers. Also, new 
machines can be added to a running database.
Replication and High Availability: MongoDB increases the 
data availability with multiple copies of data on 
different servers. By providing redundancy, it protects 
the database from hardware failures. If one server goes 
down, the data can be retrieved easily from other active 
servers which also had the data stored on them.
Aggregation: Aggregation operations process data records 
and return the computed results. It is similar to the 
GROUPBY clause in SQL. A few aggregation expressions are 
sum, avg, min, max, etc.

1. It is store data in the forms of collections and 
 documents.
2. Gained Popularity in mid 2000's.
Documents in MongoDB: looks like JSON type Structure.

JSON is a format for storing and transporting data.

JSON is often used when data is sent from a server to a 
web page.
What is JSON?
JSON stands for JavaScript Object Notation
JSON is a lightweight data interchange format
JSON is language independent *
JSON is "self-describing" and easy to understand.
{
"employees":[
  {"firstName":"John", "lastName":"Doe"},
  {"firstName":"Anna", "lastName":"Smith"},
  {"firstName":"Peter", "lastName":"Jones"}
]
}
Types of Scaling in MongoDB
In MongoDB, scaling can be achieved through different 
approaches, each addressing specific aspects of resource 
allocation and accommodating different requirements. The 
primary types of scaling in MongoDB include:

1. Horizontal Scaling(Scaling Down)
Horizontal scaling involves distributing the data across 
multiple servers or nodes. Each server is known as shard 
and it is responsible for storing a portion of the data. 
Horizontal scaling is achieved through a mechanism 
called sharding. Sharding which involves partitioning a 
database into smaller and manageable pieces called 
shards. Each shard is hosted on a separate server or 
replica set and together they form a sharded cluster.

Horizontal
Output

Key components and concepts of horizontal scaling in 
MongoDB (sharding) include:

Shard: A shard is an individual server or a replica set 
which stores a portion of the dataset. Each shard is 
responsible for managing a subset of data.
Sharded Cluster: The entire database consisting of 
multiple shards, config servers, and mongos routers. 
Config servers store metadata about the sharded cluster.
Shard Key: A field in the document that is used to 
determine the distribution of data across shards. The 
selection of shard key is imporant and enhaces the 
efficiency of horizontal scaling.
2. Vertical Scaling(Scaling Up)

Vertical scaling include the increasing capacity of a 
single server by adding more CPU, RAM, or storage 
resources. In MongoDB, it means upgrading our hardware 
to a more powerful machine. While this approach can be 
effective to a certain manner, it has its limitations.

Key points about vertical scaling are:

Upgrading Hardware: Vertical scaling typically allow 
moving to a more powerful server by upgrading its 
components. For example, we can replace a dual-core CPU 
with a quad-core CPU and add more RAM or use faster 
storage devices.

Increased Capacity: The goal of vertical scaling is to 
increase the overall capacity of a single server to 
handle more concurrent connections and process more 
transactions or retrieve larger amounts of data.

Downtime: Depending on the specific upgrades, vertical 
scaling may require downtime or a temporary interruption 
of service, especially when replacing critical 
components like the CPU or motherboard.